// Generated by gencpp from file work1/AddTwoIntsResponse.msg
// DO NOT EDIT!


#ifndef WORK1_MESSAGE_ADDTWOINTSRESPONSE_H
#define WORK1_MESSAGE_ADDTWOINTSRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace work1
{
template <class ContainerAllocator>
struct AddTwoIntsResponse_
{
  typedef AddTwoIntsResponse_<ContainerAllocator> Type;

  AddTwoIntsResponse_()
    : sum(0)
    , product(0)
    , isEqual(false)  {
    }
  AddTwoIntsResponse_(const ContainerAllocator& _alloc)
    : sum(0)
    , product(0)
    , isEqual(false)  {
  (void)_alloc;
    }



   typedef int64_t _sum_type;
  _sum_type sum;

   typedef int64_t _product_type;
  _product_type product;

   typedef uint8_t _isEqual_type;
  _isEqual_type isEqual;





  typedef boost::shared_ptr< ::work1::AddTwoIntsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::work1::AddTwoIntsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct AddTwoIntsResponse_

typedef ::work1::AddTwoIntsResponse_<std::allocator<void> > AddTwoIntsResponse;

typedef boost::shared_ptr< ::work1::AddTwoIntsResponse > AddTwoIntsResponsePtr;
typedef boost::shared_ptr< ::work1::AddTwoIntsResponse const> AddTwoIntsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::work1::AddTwoIntsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::work1::AddTwoIntsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::work1::AddTwoIntsResponse_<ContainerAllocator1> & lhs, const ::work1::AddTwoIntsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.sum == rhs.sum &&
    lhs.product == rhs.product &&
    lhs.isEqual == rhs.isEqual;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::work1::AddTwoIntsResponse_<ContainerAllocator1> & lhs, const ::work1::AddTwoIntsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace work1

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::work1::AddTwoIntsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::work1::AddTwoIntsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::work1::AddTwoIntsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::work1::AddTwoIntsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::work1::AddTwoIntsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::work1::AddTwoIntsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::work1::AddTwoIntsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9632fc6b1096e6dd1bfa923fd416adbd";
  }

  static const char* value(const ::work1::AddTwoIntsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9632fc6b1096e6ddULL;
  static const uint64_t static_value2 = 0x1bfa923fd416adbdULL;
};

template<class ContainerAllocator>
struct DataType< ::work1::AddTwoIntsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "work1/AddTwoIntsResponse";
  }

  static const char* value(const ::work1::AddTwoIntsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::work1::AddTwoIntsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 sum\n"
"int64 product\n"
"bool isEqual\n"
;
  }

  static const char* value(const ::work1::AddTwoIntsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::work1::AddTwoIntsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sum);
      stream.next(m.product);
      stream.next(m.isEqual);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AddTwoIntsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::work1::AddTwoIntsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::work1::AddTwoIntsResponse_<ContainerAllocator>& v)
  {
    s << indent << "sum: ";
    Printer<int64_t>::stream(s, indent + "  ", v.sum);
    s << indent << "product: ";
    Printer<int64_t>::stream(s, indent + "  ", v.product);
    s << indent << "isEqual: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isEqual);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WORK1_MESSAGE_ADDTWOINTSRESPONSE_H
